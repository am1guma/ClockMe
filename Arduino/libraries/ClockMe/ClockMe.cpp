#include <ClockMe.h>
#include <Arduino.h>
#include <Fonts\FreeSans9pt7b.h>

ClockMe::ClockMe() {
}

void ClockMe::Init()
{
	WiFi.setPins(8,7,5);
	IPAddress server(192, 168, 0, 164);

	_finger.begin(57600);
	_tft.begin();
	WiFi.begin("BUB", "Acasa12345");

	_client.connect(server, 81);

	_tft.setTextColor(0x0000);
	_tft.setFont(&FreeSans9pt7b);
/*
  const unsigned char myBitmap [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xf1, 
	0xc0, 0x03, 0xfe, 0x07, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x01, 0xff, 0x1c, 0x00, 0x3f, 0xe0, 
	0x70, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x1f, 0xf1, 0xc0, 0x03, 0xfe, 0x07, 0x00, 0x00, 0x07, 
	0xff, 0xc7, 0xff, 0xf1, 0xc7, 0x1f, 0x80, 0x07, 0xfc, 0x71, 0xff, 0xfc, 0x7f, 0xfc, 0x7f, 0xff, 
	0x1c, 0x71, 0xf8, 0x00, 0x7f, 0xc7, 0x1f, 0xff, 0xc7, 0xff, 0xc7, 0xff, 0xf1, 0xc7, 0x1f, 0x80, 
	0x07, 0xfc, 0x71, 0xff, 0xfc, 0x7f, 0xfc, 0x70, 0x07, 0x1f, 0xff, 0xc0, 0xe3, 0xf0, 0x3f, 0x1c, 
	0x01, 0xc7, 0xff, 0xc7, 0x00, 0x71, 0xff, 0xfc, 0x0e, 0x3f, 0x03, 0xf1, 0xc0, 0x1c, 0x7f, 0xfc, 
	0x70, 0x07, 0x1f, 0xff, 0xc0, 0xe3, 0xf0, 0x3f, 0x1c, 0x01, 0xc7, 0xff, 0xc7, 0x00, 0x71, 0xc0, 
	0x1c, 0x70, 0x38, 0xfc, 0x71, 0xc0, 0x1c, 0x7f, 0xfc, 0x70, 0x07, 0x1c, 0x01, 0xc7, 0x03, 0x8f, 
	0xc7, 0x1c, 0x01, 0xc7, 0xff, 0xc7, 0x00, 0x71, 0xc0, 0x1c, 0x70, 0x38, 0xfc, 0x71, 0xc0, 0x1c, 
	0x7f, 0xfc, 0x70, 0x07, 0x1f, 0x8f, 0xff, 0xe0, 0x70, 0x07, 0x1c, 0x01, 0xc7, 0xff, 0xc7, 0x00, 
	0x71, 0xf8, 0xff, 0xfe, 0x07, 0x00, 0x71, 0xc0, 0x1c, 0x7f, 0xfc, 0x70, 0x07, 0x1f, 0x8f, 0xff, 
	0xe0, 0x70, 0x07, 0x1c, 0x01, 0xc7, 0xff, 0xc7, 0xff, 0xf1, 0xc0, 0xe0, 0x7f, 0xff, 0xfc, 0x71, 
	0xff, 0xfc, 0x7f, 0xfc, 0x7f, 0xff, 0x1c, 0x0e, 0x07, 0xff, 0xff, 0xc7, 0x1f, 0xff, 0xc7, 0xff, 
	0xc7, 0xff, 0xf1, 0xc0, 0xe0, 0x7f, 0xff, 0xfc, 0x71, 0xff, 0xfc, 0x7f, 0xfc, 0x00, 0x00, 0x1c, 
	0x71, 0xc7, 0x1c, 0x71, 0xc7, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x01, 0xc7, 0x1c, 0x71, 0xc7, 
	0x1c, 0x70, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0x00, 0x00, 
	0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xf1, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x3f, 0x1c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 
	0xf1, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0x00, 0x0e, 0x3f, 0xff, 0x8e, 0x38, 
	0xe3, 0x8e, 0x3f, 0xff, 0xc0, 0x00, 0x70, 0x00, 0xe3, 0xff, 0xf8, 0xe3, 0x8e, 0x38, 0xe3, 0xff, 
	0xfc, 0x00, 0x07, 0x00, 0x0e, 0x3f, 0xff, 0x8e, 0x38, 0xe3, 0x8e, 0x3f, 0xff, 0xf8, 0xfc, 0x0f, 
	0xff, 0x1c, 0x00, 0x3f, 0xe0, 0x71, 0xc0, 0x00, 0x7f, 0xff, 0x8f, 0xc0, 0xff, 0xf1, 0xc0, 0x03, 
	0xfe, 0x07, 0x1c, 0x00, 0x07, 0xff, 0xf8, 0xfc, 0x0f, 0xff, 0x1c, 0x00, 0x3f, 0xe0, 0x71, 0xc0, 
	0x00, 0x7f, 0xff, 0x8f, 0xc0, 0x00, 0x71, 0xf8, 0x03, 0x81, 0xc7, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 
	0xfc, 0x00, 0x07, 0x1f, 0x80, 0x38, 0x1c, 0x7f, 0xff, 0x03, 0xff, 0xff, 0x8f, 0xc0, 0x00, 0x71, 
	0xf8, 0x03, 0x81, 0xc7, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x1c, 0x7e, 0x07, 0xfc, 0x0e, 0x07, 0x00, 
	0x0e, 0x07, 0xe0, 0x7f, 0xff, 0xf1, 0xc7, 0xe0, 0x7f, 0xc0, 0xe0, 0x70, 0x00, 0xe0, 0x7e, 0x07, 
	0xff, 0xff, 0x1c, 0x7e, 0x07, 0xfc, 0x0e, 0x07, 0x00, 0x0e, 0x07, 0xe0, 0x7f, 0xfc, 0x00, 0x3f, 
	0x03, 0x81, 0xc7, 0x00, 0x01, 0xf8, 0xe3, 0x80, 0x3f, 0xff, 0xc0, 0x03, 0xf0, 0x38, 0x1c, 0x70, 
	0x00, 0x1f, 0x8e, 0x38, 0x03, 0xff, 0xfc, 0x00, 0x3f, 0x03, 0x81, 0xc7, 0x00, 0x01, 0xf8, 0xe3, 
	0x80, 0x3f, 0xff, 0xc7, 0x03, 0x8f, 0xf8, 0xff, 0xff, 0xf8, 0xe0, 0x71, 0xc7, 0xfc, 0x7f, 0xfc, 
	0x70, 0x38, 0xff, 0x8f, 0xff, 0xff, 0x8e, 0x07, 0x1c, 0x7f, 0xc7, 0xff, 0xc7, 0x03, 0x8f, 0xf8, 
	0xff, 0xff, 0xf8, 0xe0, 0x71, 0xc7, 0xfc, 0x7f, 0xfc, 0x01, 0xc0, 0x1c, 0x7e, 0x07, 0xe0, 0x0f, 
	0xc0, 0x00, 0x0e, 0x3f, 0xff, 0xc0, 0x1c, 0x01, 0xc7, 0xe0, 0x7e, 0x00, 0xfc, 0x00, 0x00, 0xe3, 
	0xff, 0xfc, 0x01, 0xc0, 0x1c, 0x7e, 0x07, 0xe0, 0x0f, 0xc0, 0x00, 0x0e, 0x3f, 0xff, 0xf8, 0xe0, 
	0x0f, 0xc7, 0xe3, 0xf1, 0xff, 0xfc, 0x01, 0xc7, 0xff, 0xff, 0xff, 0x8e, 0x00, 0xfc, 0x7e, 0x3f, 
	0x1f, 0xff, 0xc0, 0x1c, 0x7f, 0xff, 0xff, 0xf8, 0xe0, 0x0f, 0xc7, 0xe3, 0xf1, 0xff, 0xfc, 0x01, 
	0xc7, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0x8e, 0x3f, 0xe0, 0x0f, 0xf8, 0xe3, 0x80, 0x07, 0xff, 
	0xff, 0xff, 0x81, 0xf8, 0xe3, 0xfe, 0x00, 0xff, 0x8e, 0x38, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x1f, 
	0x8e, 0x3f, 0xe0, 0x0f, 0xf8, 0xe3, 0x80, 0x07, 0xff, 0xc0, 0x00, 0x7e, 0x3f, 0xfc, 0x01, 0xff, 
	0xe0, 0x71, 0xc0, 0xfc, 0x7f, 0xfc, 0x00, 0x07, 0xe3, 0xff, 0xc0, 0x1f, 0xfe, 0x07, 0x1c, 0x0f, 
	0xc7, 0xff, 0xc0, 0x00, 0x7e, 0x3f, 0xfc, 0x01, 0xff, 0xe0, 0x71, 0xc0, 0xfc, 0x7f, 0xfc, 0x71, 
	0xf8, 0x03, 0x81, 0xf8, 0x03, 0xf1, 0xf8, 0x1f, 0xf0, 0x3f, 0xff, 0xc7, 0x1f, 0x80, 0x38, 0x1f, 
	0x80, 0x3f, 0x1f, 0x81, 0xff, 0x03, 0xff, 0xfc, 0x71, 0xf8, 0x03, 0x81, 0xf8, 0x03, 0xf1, 0xf8, 
	0x1f, 0xf0, 0x3f, 0xff, 0xc7, 0x1c, 0x0f, 0xc7, 0xfc, 0x0f, 0xff, 0x03, 0x8e, 0x3f, 0xff, 0xff, 
	0xfc, 0x71, 0xc0, 0xfc, 0x7f, 0xc0, 0xff, 0xf0, 0x38, 0xe3, 0xff, 0xff, 0xff, 0xc7, 0x1c, 0x0f, 
	0xc7, 0xfc, 0x0f, 0xff, 0x03, 0x8e, 0x3f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0x1f, 0x8f, 0xc7, 0x00, 
	0x0f, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xc7, 0xff, 0xf1, 0xf8, 0xfc, 0x70, 0x00, 0xfc, 0x00, 0x00, 
	0x03, 0xff, 0xfc, 0x7f, 0xff, 0x1f, 0x8f, 0xc7, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xc7, 0x1f, 0xff, 0xf8, 0x00, 0x7f, 0xc7, 0x1c, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0x71, 
	0xff, 0xff, 0x80, 0x07, 0xfc, 0x71, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x1f, 0xff, 0xf8, 0x00, 
	0x7f, 0xc7, 0x1c, 0x7f, 0xfc, 0x00, 0x00, 0x1c, 0x00, 0x07, 0xe0, 0x71, 0xc7, 0x1c, 0x7e, 0x3f, 
	0xff, 0xc0, 0x00, 0x01, 0xc0, 0x00, 0x7e, 0x07, 0x1c, 0x71, 0xc7, 0xe3, 0xff, 0xfc, 0x00, 0x00, 
	0x1c, 0x00, 0x07, 0xe0, 0x71, 0xc7, 0x1c, 0x7e, 0x3f, 0xff, 0xc7, 0xff, 0xf1, 0xff, 0xe3, 0xf0, 
	0x3f, 0xe0, 0x7f, 0xc7, 0xe0, 0x7f, 0xfc, 0x7f, 0xff, 0x1f, 0xfe, 0x3f, 0x03, 0xfe, 0x07, 0xfc, 
	0x7e, 0x07, 0xff, 0xc7, 0xff, 0xf1, 0xff, 0xe3, 0xf0, 0x3f, 0xe0, 0x7f, 0xc7, 0xe0, 0x7f, 0xfc, 
	0x70, 0x07, 0x1c, 0x7e, 0x3f, 0xe0, 0x0f, 0xc0, 0x00, 0x70, 0x3f, 0xff, 0xc7, 0x00, 0x71, 0xc7, 
	0xe3, 0xfe, 0x00, 0xfc, 0x00, 0x07, 0x03, 0xff, 0xfc, 0x70, 0x07, 0x1c, 0x7e, 0x3f, 0xe0, 0x0f, 
	0xc0, 0x00, 0x70, 0x3f, 0xff, 0xc7, 0x00, 0x71, 0xc0, 0xfc, 0x01, 0xf8, 0x00, 0x0f, 0xf8, 0x00, 
	0x7f, 0xfc, 0x70, 0x07, 0x1c, 0x0f, 0xc0, 0x1f, 0x80, 0x00, 0xff, 0x80, 0x07, 0xff, 0xc7, 0x00, 
	0x71, 0xc0, 0xfc, 0x01, 0xf8, 0x00, 0x0f, 0xf8, 0x00, 0x7f, 0xfc, 0x70, 0x07, 0x1c, 0x0f, 0xf8, 
	0x00, 0x0e, 0x07, 0x1c, 0x70, 0x3f, 0xff, 0xc7, 0x00, 0x71, 0xc0, 0xff, 0x80, 0x00, 0xe0, 0x71, 
	0xc7, 0x03, 0xff, 0xfc, 0x70, 0x07, 0x1c, 0x0f, 0xf8, 0x00, 0x0e, 0x07, 0x1c, 0x70, 0x3f, 0xff, 
	0xc7, 0xff, 0xf1, 0xc0, 0x1c, 0x0e, 0x07, 0x1c, 0x0f, 0xc7, 0xe3, 0xff, 0xfc, 0x7f, 0xff, 0x1c, 
	0x01, 0xc0, 0xe0, 0x71, 0xc0, 0xfc, 0x7e, 0x3f, 0xff, 0xc7, 0xff, 0xf1, 0xc0, 0x1c, 0x0e, 0x07, 
	0x1c, 0x0f, 0xc7, 0xe3, 0xff, 0xfc, 0x00, 0x00, 0x1c, 0x7f, 0xc7, 0x1c, 0x01, 0xff, 0xfc, 0x01, 
	0xff, 0xff, 0xc0, 0x00, 0x01, 0xc7, 0xfc, 0x71, 0xc0, 0x1f, 0xff, 0xc0, 0x1f, 0xff, 0xfc, 0x00, 
	0x00, 0x1c, 0x7f, 0xc7, 0x1c, 0x01, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff
};


  const PROGMEM uint8_t qrCode1[1250] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x1C, 0x71, 0xF8, 
0xFF, 0x80, 0x07, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00, 0x01, 0xC7, 0x1F, 0x8F, 0xF8, 0x00, 0x70, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x00, 0x1C, 0x71, 0xF8, 0xFF, 0x80, 
0x07, 0x00, 0x00, 0x07, 0xFF, 0xC7, 0xFF, 0xF1, 0xC7, 0x03, 0x8E, 0x07, 0xFF, 0xF1, 0xFF, 0xFC, 0x7F, 0xFC, 0x7F, 0xFF, 0x1C, 0x70, 0x38, 0xE0, 0x7F, 0xFF, 0x1F, 
0xFF, 0xC7, 0xFF, 0xC7, 0xFF, 0xF1, 0xC7, 0x03, 0x8E, 0x07, 0xFF, 0xF1, 0xFF, 0xFC, 0x7F, 0xFC, 0x70, 0x07, 0x1C, 0x00, 0x3F, 0xE0, 0x0F, 0xFF, 0x1C, 0x01, 0xC7, 
0xFF, 0xC7, 0x00, 0x71, 0xC0, 0x03, 0xFE, 0x00, 0xFF, 0xF1, 0xC0, 0x1C, 0x7F, 0xFC, 0x70, 0x07, 0x1C, 0x00, 0x3F, 0xE0, 0x0F, 0xFF, 0x1C, 0x01, 0xC7, 0xFF, 0xC7, 
0x00, 0x71, 0xC0, 0xE0, 0x0F, 0xF8, 0x03, 0xF1, 0xC0, 0x1C, 0x7F, 0xFC, 0x70, 0x07, 0x1C, 0x0E, 0x00, 0xFF, 0x80, 0x3F, 0x1C, 0x01, 0xC7, 0xFF, 0xC7, 0x00, 0x71, 
0xC0, 0xE0, 0x0F, 0xF8, 0x03, 0xF1, 0xC0, 0x1C, 0x7F, 0xFC, 0x70, 0x07, 0x1C, 0x0E, 0x38, 0xE0, 0x0F, 0xFF, 0x1C, 0x01, 0xC7, 0xFF, 0xC7, 0x00, 0x71, 0xC0, 0xE3, 
0x8E, 0x00, 0xFF, 0xF1, 0xC0, 0x1C, 0x7F, 0xFC, 0x70, 0x07, 0x1C, 0x0E, 0x38, 0xE0, 0x0F, 0xFF, 0x1C, 0x01, 0xC7, 0xFF, 0xC7, 0xFF, 0xF1, 0xF8, 0x1C, 0x7F, 0xFF, 
0x1C, 0x71, 0xFF, 0xFC, 0x7F, 0xFC, 0x7F, 0xFF, 0x1F, 0x81, 0xC7, 0xFF, 0xF1, 0xC7, 0x1F, 0xFF, 0xC7, 0xFF, 0xC7, 0xFF, 0xF1, 0xF8, 0x1C, 0x7F, 0xFF, 0x1C, 0x71, 
0xFF, 0xFC, 0x7F, 0xFC, 0x00, 0x00, 0x1C, 0x71, 0xC7, 0x1C, 0x71, 0xC7, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00, 0x01, 0xC7, 0x1C, 0x71, 0xC7, 0x1C, 0x70, 0x00, 0x00, 
0x7F, 0xFC, 0x00, 0x00, 0x1C, 0x71, 0xC7, 0x1C, 0x71, 0xC7, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xC7, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFC, 0x0F, 0xFF, 0xFC, 0x7F, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xC7, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x8E, 0x38, 
0x1C, 0x7F, 0xC0, 0xFC, 0x71, 0xF8, 0x1C, 0x00, 0x07, 0xFF, 0xF8, 0xE3, 0x81, 0xC7, 0xFC, 0x0F, 0xC7, 0x1F, 0x81, 0xC0, 0x00, 0x7F, 0xFF, 0x8E, 0x38, 0x1C, 0x7F, 
0xC0, 0xFC, 0x71, 0xF8, 0x1C, 0x00, 0x07, 0xFF, 0xFF, 0xE0, 0x0E, 0x07, 0xFC, 0x7F, 0xC0, 0x1C, 0x7F, 0xF8, 0x03, 0xFF, 0xFF, 0xFE, 0x00, 0xE0, 0x7F, 0xC7, 0xFC, 
0x01, 0xC7, 0xFF, 0x80, 0x3F, 0xFF, 0xFF, 0xE0, 0x0E, 0x07, 0xFC, 0x7F, 0xC0, 0x1C, 0x7F, 0xF8, 0x03, 0xFF, 0xFC, 0x0E, 0x3F, 0x03, 0x81, 0xC7, 0x00, 0x0F, 0xF8, 
0x00, 0x00, 0x07, 0xFF, 0xC0, 0xE3, 0xF0, 0x38, 0x1C, 0x70, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x7F, 0xFC, 0x0E, 0x3F, 0x03, 0x81, 0xC7, 0x00, 0x0F, 0xF8, 0x00, 0x00, 
0x07, 0xFF, 0xFF, 0xFF, 0x8E, 0x07, 0xFF, 0xF0, 0x07, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xE0, 0x7F, 0xFF, 0x00, 0x7F, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 
0xFF, 0xFF, 0x8E, 0x07, 0xFF, 0xF0, 0x07, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xFC, 0x70, 0x38, 0x1F, 0x8E, 0x07, 0x1F, 0x8E, 0x07, 0x1F, 0x8E, 0x07, 0xFF, 0xC7, 0x03, 
0x81, 0xF8, 0xE0, 0x71, 0xF8, 0xE0, 0x71, 0xF8, 0xE0, 0x7F, 0xFC, 0x70, 0x38, 0x1F, 0x8E, 0x07, 0x1F, 0x8E, 0x07, 0x1F, 0x8E, 0x07, 0xFF, 0xC0, 0x1F, 0xFF, 0xF8, 
0x03, 0xFF, 0xF8, 0x03, 0xFF, 0xF8, 0x03, 0xFF, 0xFC, 0x01, 0xFF, 0xFF, 0x80, 0x3F, 0xFF, 0x80, 0x3F, 0xFF, 0x80, 0x3F, 0xFF, 0xC0, 0x1F, 0xFF, 0xF8, 0x03, 0xFF, 
0xF8, 0x03, 0xFF, 0xF8, 0x03, 0xFF, 0xFC, 0x0E, 0x3F, 0x03, 0x81, 0xC7, 0xE3, 0x81, 0xC7, 0xE3, 0x81, 0xC7, 0xFF, 0xC0, 0xE3, 0xF0, 0x38, 0x1C, 0x7E, 0x38, 0x1C, 
0x7E, 0x38, 0x1C, 0x7F, 0xFC, 0x0E, 0x3F, 0x03, 0x81, 0xC7, 0xE3, 0x81, 0xC7, 0xE3, 0x81, 0xC7, 0xFF, 0xC0, 0x00, 0x7F, 0xF8, 0x00, 0x71, 0xC7, 0x1C, 0x70, 0x07, 
0x03, 0xFF, 0xFC, 0x00, 0x07, 0xFF, 0x80, 0x07, 0x1C, 0x71, 0xC7, 0x00, 0x70, 0x3F, 0xFF, 0xC0, 0x00, 0x7F, 0xF8, 0x00, 0x71, 0xC7, 0x1C, 0x70, 0x07, 0x03, 0xFF, 
0xFF, 0x8F, 0xC7, 0x03, 0xF0, 0x07, 0x1C, 0x71, 0xC7, 0xE0, 0x70, 0x07, 0xFF, 0xF8, 0xFC, 0x70, 0x3F, 0x00, 0x71, 0xC7, 0x1C, 0x7E, 0x07, 0x00, 0x7F, 0xFF, 0x8F, 
0xC7, 0x03, 0xF0, 0x07, 0x1C, 0x71, 0xC7, 0xE0, 0x70, 0x07, 0xFF, 0xFF, 0xE3, 0xFF, 0xC7, 0x1C, 0x01, 0xC7, 0xFC, 0x0F, 0xC0, 0x1C, 0x7F, 0xFF, 0xFE, 0x3F, 0xFC, 
0x71, 0xC0, 0x1C, 0x7F, 0xC0, 0xFC, 0x01, 0xC7, 0xFF, 0xFF, 0xE3, 0xFF, 0xC7, 0x1C, 0x01, 0xC7, 0xFC, 0x0F, 0xC0, 0x1C, 0x7F, 0xFF, 0xF1, 0xC7, 0x1F, 0xF0, 0x07, 
0xFF, 0xF0, 0x38, 0x1F, 0x8E, 0x07, 0xFF, 0xFF, 0x1C, 0x71, 0xFF, 0x00, 0x7F, 0xFF, 0x03, 0x81, 0xF8, 0xE0, 0x7F, 0xFF, 0xF1, 0xC7, 0x1F, 0xF0, 0x07, 0xFF, 0xF0, 
0x38, 0x1F, 0x8E, 0x07, 0xFF, 0xC7, 0x1C, 0x7F, 0xC0, 0xE3, 0x8F, 0xF8, 0xE3, 0x8E, 0x38, 0x1F, 0xFF, 0xFC, 0x71, 0xC7, 0xFC, 0x0E, 0x38, 0xFF, 0x8E, 0x38, 0xE3, 
0x81, 0xFF, 0xFF, 0xC7, 0x1C, 0x7F, 0xC0, 0xE3, 0x8F, 0xF8, 0xE3, 0x8E, 0x38, 0x1F, 0xFF, 0xFC, 0x0E, 0x00, 0x1F, 0x80, 0x38, 0x03, 0x8F, 0xC0, 0x00, 0x00, 0x3F, 
0xFF, 0xC0, 0xE0, 0x01, 0xF8, 0x03, 0x80, 0x38, 0xFC, 0x00, 0x00, 0x03, 0xFF, 0xFC, 0x0E, 0x00, 0x1F, 0x80, 0x38, 0x03, 0x8F, 0xC0, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 
0xFF, 0xFF, 0xC7, 0xE0, 0x70, 0x07, 0x00, 0x7F, 0xC0, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x7E, 0x07, 0x00, 0x70, 0x07, 0xFC, 0x0E, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 
0xC7, 0xE0, 0x70, 0x07, 0x00, 0x7F, 0xC0, 0xE3, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0x8F, 0xF8, 0x03, 0x81, 0xC7, 0x1C, 0x71, 0xFF, 0xFF, 0xC0, 0x00, 0x01, 0xF8, 0xFF, 
0x80, 0x38, 0x1C, 0x71, 0xC7, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0x8F, 0xF8, 0x03, 0x81, 0xC7, 0x1C, 0x71, 0xFF, 0xFF, 0xC7, 0xFF, 0xF1, 0xC7, 0xE0, 0x71, 0xC7, 
0xE0, 0x7F, 0xC7, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0x1C, 0x7E, 0x07, 0x1C, 0x7E, 0x07, 0xFC, 0x7F, 0xFF, 0xFF, 0xC7, 0xFF, 0xF1, 0xC7, 0xE0, 0x71, 0xC7, 0xE0, 0x7F, 
0xC7, 0xFF, 0xFF, 0xFC, 0x70, 0x07, 0x1F, 0x8E, 0x38, 0x03, 0x8F, 0xC0, 0x00, 0x70, 0x07, 0xFF, 0xC7, 0x00, 0x71, 0xF8, 0xE3, 0x80, 0x38, 0xFC, 0x00, 0x07, 0x00, 
0x7F, 0xFC, 0x70, 0x07, 0x1F, 0x8E, 0x38, 0x03, 0x8F, 0xC0, 0x00, 0x70, 0x07, 0xFF, 0xC7, 0x00, 0x71, 0xC0, 0xFC, 0x71, 0xC0, 0xFC, 0x7F, 0xF8, 0xFC, 0x7F, 0xFC, 
0x70, 0x07, 0x1C, 0x0F, 0xC7, 0x1C, 0x0F, 0xC7, 0xFF, 0x8F, 0xC7, 0xFF, 0xC7, 0x00, 0x71, 0xC0, 0xFC, 0x71, 0xC0, 0xFC, 0x7F, 0xF8, 0xFC, 0x7F, 0xFC, 0x70, 0x07, 
0x1F, 0x81, 0xC7, 0xFC, 0x71, 0xC0, 0xFC, 0x01, 0xC7, 0xFF, 0xC7, 0x00, 0x71, 0xF8, 0x1C, 0x7F, 0xC7, 0x1C, 0x0F, 0xC0, 0x1C, 0x7F, 0xFC, 0x70, 0x07, 0x1F, 0x81, 
0xC7, 0xFC, 0x71, 0xC0, 0xFC, 0x01, 0xC7, 0xFF, 0xC7, 0xFF, 0xF1, 0xC0, 0x00, 0x71, 0xC7, 0x1C, 0x70, 0x00, 0x03, 0xFF, 0xFC, 0x7F, 0xFF, 0x1C, 0x00, 0x07, 0x1C, 
0x71, 0xC7, 0x00, 0x00, 0x3F, 0xFF, 0xC7, 0xFF, 0xF1, 0xC0, 0x00, 0x71, 0xC7, 0x1C, 0x70, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0x8E, 0x38, 0xFC, 0x0F, 0xF8, 
0xE3, 0x8F, 0xFF, 0xFF, 0xC0, 0x00, 0x01, 0xF8, 0xE3, 0x8F, 0xC0, 0xFF, 0x8E, 0x38, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0x8E, 0x38, 0xFC, 0x0F, 0xF8, 0xE3, 0x8F, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};*/
  //_tft.drawBitmap(60,110,myBitmap,100,100,0x0000);
}

void ClockMe::DisplayMessage(int16_t x, int16_t y, String message)
{
	_tft.fillRect(0, y - 20, 240, 30, 0xffff);
	_tft.setCursor(x, y);
	_tft.print(message);
}

void ClockMe::Draw(char *filename, int16_t x, int16_t y)
{
	_tft.bmpDraw(filename, x, y);
}

void ClockMe::DrawQr()
{
  //tft.drawRGBBitmap(70,110,qrCode,100,100);
}

void ClockMe::ClearScreen()
{
	_tft.fillScreen(0xffff);
}

void ClockMe::SetId()
{
  Serial.println("test1");
  String response = ArduinoRequest(3,0);
  Serial.println(response);
	_id = response.toInt();
}

String ClockMe::ArduinoRequest(uint8_t requestType, uint8_t fingerId) {
  String request = "GET /Arduino/ArduinoRequest";
  request = request + "?requestType=" + requestType + "&id=" + fingerId + " HTTP/1.1";
  Serial.println(request);
  _client.println(request);
  _client.println("Host: localhost");
  _client.println();
  return ProcessIncomingMessages();
}

String ClockMe::ProcessIncomingMessages(){
  int cnt = 0;
  String message;
  while (!_client.available()) {};
  bool foundContent = false;
  while (_client.available()) {
    String line="";
    char c;
    if(!foundContent)
    {
      while(line.indexOf("Content-Length") < 0)
      {
        c = _client.read();
        //Serial.print(c);
        line += c;
      }
      c = _client.read();
      //Serial.print(c);
      while(c!='\n')
      {
        c = _client.read();
        //Serial.print(c);
      }
      foundContent = true;
    }
    
    c = _client.read();
    if(c!='\n')
    {
      message += c;

    }
  }
  //Serial.println(message);
	return message;
}

uint8_t ClockMe::DeleteFingerprint(uint8_t id) {
  uint8_t p = -1;

  p = _finger.deleteModel(id);

  if (p == FINGERPRINT_OK) {
    Serial.println("Deleted!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not delete in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.print("Unknown error: 0x"); Serial.println(p, HEX);
    return p;
  }
}

uint8_t ClockMe::GetFingerprintId() {
  uint8_t p = _finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.println("No finger detected");
      return -2;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return -1;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return -1;
    default:
      Serial.println("Unknown error");
      return -1;
  }

  // OK success!

  p = _finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return -1;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return -1;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return -1;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return -1;
    default:
      Serial.println("Unknown error");
      return -1;
  }

  // OK converted!
  p = _finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return -1;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Not found");
    return -3;
  } else {
    Serial.println("Unknown error");
    return -1;
  }

  // found a match!
  return _finger.fingerID;
}

uint8_t ClockMe::GetFingerprintEnroll() {

  int p = -1;
  while (p != FINGERPRINT_OK) {
    p = _finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.println(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = _finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  p = _finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
	DisplayMessage(20,80,"Fingerprint already exists");
	return -2;
  } else{

  DisplayMessage(20,80,"Remove finger");
  Serial.println("Remove finger");
  delay(2000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = _finger.getImage();
  }
  Serial.print("ID "); Serial.println(_id);
  p = -1;
  DisplayMessage(20,80,"Place same finger again");
  Serial.println("Place same finger again");
  while (p != FINGERPRINT_OK) {
    p = _finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = _finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK converted!
  Serial.print("Creating model for #");  Serial.println(_id);

  p = _finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
    Serial.println("Fingerprints did not match");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  Serial.print("ID "); Serial.println(_id);
  p = _finger.storeModel(_id);
  if (p == FINGERPRINT_OK) {
    Serial.println("Stored!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  String response = ArduinoRequest(2, _id);
  DisplayMessage(20,40,"Use this PIN to register:");
  DisplayMessage(20,80,response);

/*
  Serial.println("start request sent");

  String request = "GET /Arduino/ArduinoRequest?requestType=6&id=0 HTTP/1.1";
  Serial.println(request);
  _client.println(request);
  _client.println("Host: localhost");
  _client.println();
  while (!_client.available()) {};
  char b1;
  char b2;
  bool foundContent = false;

  uint8_t bytes[2000];
  uint8_t bi = 0;
    String hexByte;
  while (_client.available()) {

    String line="";
    char c;
    if(!foundContent)
    {
      while(line.indexOf("Content-Length") < 0)
      {
        c = _client.read();
        Serial.print(c);
        line += c;
      }
      c = _client.read();
      Serial.print(c);
      while(c!='\n')
      {
        c = _client.read();
        Serial.print(c);
      }
      foundContent = true;
    }
    
    c = _client.read();
        Serial.print(c);
        
    if(c!='\n')
    {
      hexByte += c;
      if(hexByte.length() == 2)
      {
          uint8_t number = (uint8_t)strtol( &hexByte[0], NULL, 16);
          //Serial.println(number);
          bytes[bi] = number;
          bi += 1;
          hexByte = "";
        
      }
    }
    
  }
*/
/*
  const PROGMEM uint8_t qrCode1[1250] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x1C, 0x71, 0xF8, 
0xFF, 0x80, 0x07, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00, 0x01, 0xC7, 0x1F, 0x8F, 0xF8, 0x00, 0x70, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x00, 0x1C, 0x71, 0xF8, 0xFF, 0x80, 
0x07, 0x00, 0x00, 0x07, 0xFF, 0xC7, 0xFF, 0xF1, 0xC7, 0x03, 0x8E, 0x07, 0xFF, 0xF1, 0xFF, 0xFC, 0x7F, 0xFC, 0x7F, 0xFF, 0x1C, 0x70, 0x38, 0xE0, 0x7F, 0xFF, 0x1F, 
0xFF, 0xC7, 0xFF, 0xC7, 0xFF, 0xF1, 0xC7, 0x03, 0x8E, 0x07, 0xFF, 0xF1, 0xFF, 0xFC, 0x7F, 0xFC, 0x70, 0x07, 0x1C, 0x00, 0x3F, 0xE0, 0x0F, 0xFF, 0x1C, 0x01, 0xC7, 
0xFF, 0xC7, 0x00, 0x71, 0xC0, 0x03, 0xFE, 0x00, 0xFF, 0xF1, 0xC0, 0x1C, 0x7F, 0xFC, 0x70, 0x07, 0x1C, 0x00, 0x3F, 0xE0, 0x0F, 0xFF, 0x1C, 0x01, 0xC7, 0xFF, 0xC7, 
0x00, 0x71, 0xC0, 0xE0, 0x0F, 0xF8, 0x03, 0xF1, 0xC0, 0x1C, 0x7F, 0xFC, 0x70, 0x07, 0x1C, 0x0E, 0x00, 0xFF, 0x80, 0x3F, 0x1C, 0x01, 0xC7, 0xFF, 0xC7, 0x00, 0x71, 
0xC0, 0xE0, 0x0F, 0xF8, 0x03, 0xF1, 0xC0, 0x1C, 0x7F, 0xFC, 0x70, 0x07, 0x1C, 0x0E, 0x38, 0xE0, 0x0F, 0xFF, 0x1C, 0x01, 0xC7, 0xFF, 0xC7, 0x00, 0x71, 0xC0, 0xE3, 
0x8E, 0x00, 0xFF, 0xF1, 0xC0, 0x1C, 0x7F, 0xFC, 0x70, 0x07, 0x1C, 0x0E, 0x38, 0xE0, 0x0F, 0xFF, 0x1C, 0x01, 0xC7, 0xFF, 0xC7, 0xFF, 0xF1, 0xF8, 0x1C, 0x7F, 0xFF, 
0x1C, 0x71, 0xFF, 0xFC, 0x7F, 0xFC, 0x7F, 0xFF, 0x1F, 0x81, 0xC7, 0xFF, 0xF1, 0xC7, 0x1F, 0xFF, 0xC7, 0xFF, 0xC7, 0xFF, 0xF1, 0xF8, 0x1C, 0x7F, 0xFF, 0x1C, 0x71, 
0xFF, 0xFC, 0x7F, 0xFC, 0x00, 0x00, 0x1C, 0x71, 0xC7, 0x1C, 0x71, 0xC7, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00, 0x01, 0xC7, 0x1C, 0x71, 0xC7, 0x1C, 0x70, 0x00, 0x00, 
0x7F, 0xFC, 0x00, 0x00, 0x1C, 0x71, 0xC7, 0x1C, 0x71, 0xC7, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xC7, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFC, 0x0F, 0xFF, 0xFC, 0x7F, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xC7, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x8E, 0x38, 
0x1C, 0x7F, 0xC0, 0xFC, 0x71, 0xF8, 0x1C, 0x00, 0x07, 0xFF, 0xF8, 0xE3, 0x81, 0xC7, 0xFC, 0x0F, 0xC7, 0x1F, 0x81, 0xC0, 0x00, 0x7F, 0xFF, 0x8E, 0x38, 0x1C, 0x7F, 
0xC0, 0xFC, 0x71, 0xF8, 0x1C, 0x00, 0x07, 0xFF, 0xFF, 0xE0, 0x0E, 0x07, 0xFC, 0x7F, 0xC0, 0x1C, 0x7F, 0xF8, 0x03, 0xFF, 0xFF, 0xFE, 0x00, 0xE0, 0x7F, 0xC7, 0xFC, 
0x01, 0xC7, 0xFF, 0x80, 0x3F, 0xFF, 0xFF, 0xE0, 0x0E, 0x07, 0xFC, 0x7F, 0xC0, 0x1C, 0x7F, 0xF8, 0x03, 0xFF, 0xFC, 0x0E, 0x3F, 0x03, 0x81, 0xC7, 0x00, 0x0F, 0xF8, 
0x00, 0x00, 0x07, 0xFF, 0xC0, 0xE3, 0xF0, 0x38, 0x1C, 0x70, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x7F, 0xFC, 0x0E, 0x3F, 0x03, 0x81, 0xC7, 0x00, 0x0F, 0xF8, 0x00, 0x00, 
0x07, 0xFF, 0xFF, 0xFF, 0x8E, 0x07, 0xFF, 0xF0, 0x07, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xE0, 0x7F, 0xFF, 0x00, 0x7F, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 
0xFF, 0xFF, 0x8E, 0x07, 0xFF, 0xF0, 0x07, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xFC, 0x70, 0x38, 0x1F, 0x8E, 0x07, 0x1F, 0x8E, 0x07, 0x1F, 0x8E, 0x07, 0xFF, 0xC7, 0x03, 
0x81, 0xF8, 0xE0, 0x71, 0xF8, 0xE0, 0x71, 0xF8, 0xE0, 0x7F, 0xFC, 0x70, 0x38, 0x1F, 0x8E, 0x07, 0x1F, 0x8E, 0x07, 0x1F, 0x8E, 0x07, 0xFF, 0xC0, 0x1F, 0xFF, 0xF8, 
0x03, 0xFF, 0xF8, 0x03, 0xFF, 0xF8, 0x03, 0xFF, 0xFC, 0x01, 0xFF, 0xFF, 0x80, 0x3F, 0xFF, 0x80, 0x3F, 0xFF, 0x80, 0x3F, 0xFF, 0xC0, 0x1F, 0xFF, 0xF8, 0x03, 0xFF, 
0xF8, 0x03, 0xFF, 0xF8, 0x03, 0xFF, 0xFC, 0x0E, 0x3F, 0x03, 0x81, 0xC7, 0xE3, 0x81, 0xC7, 0xE3, 0x81, 0xC7, 0xFF, 0xC0, 0xE3, 0xF0, 0x38, 0x1C, 0x7E, 0x38, 0x1C, 
0x7E, 0x38, 0x1C, 0x7F, 0xFC, 0x0E, 0x3F, 0x03, 0x81, 0xC7, 0xE3, 0x81, 0xC7, 0xE3, 0x81, 0xC7, 0xFF, 0xC0, 0x00, 0x7F, 0xF8, 0x00, 0x71, 0xC7, 0x1C, 0x70, 0x07, 
0x03, 0xFF, 0xFC, 0x00, 0x07, 0xFF, 0x80, 0x07, 0x1C, 0x71, 0xC7, 0x00, 0x70, 0x3F, 0xFF, 0xC0, 0x00, 0x7F, 0xF8, 0x00, 0x71, 0xC7, 0x1C, 0x70, 0x07, 0x03, 0xFF, 
0xFF, 0x8F, 0xC7, 0x03, 0xF0, 0x07, 0x1C, 0x71, 0xC7, 0xE0, 0x70, 0x07, 0xFF, 0xF8, 0xFC, 0x70, 0x3F, 0x00, 0x71, 0xC7, 0x1C, 0x7E, 0x07, 0x00, 0x7F, 0xFF, 0x8F, 
0xC7, 0x03, 0xF0, 0x07, 0x1C, 0x71, 0xC7, 0xE0, 0x70, 0x07, 0xFF, 0xFF, 0xE3, 0xFF, 0xC7, 0x1C, 0x01, 0xC7, 0xFC, 0x0F, 0xC0, 0x1C, 0x7F, 0xFF, 0xFE, 0x3F, 0xFC, 
0x71, 0xC0, 0x1C, 0x7F, 0xC0, 0xFC, 0x01, 0xC7, 0xFF, 0xFF, 0xE3, 0xFF, 0xC7, 0x1C, 0x01, 0xC7, 0xFC, 0x0F, 0xC0, 0x1C, 0x7F, 0xFF, 0xF1, 0xC7, 0x1F, 0xF0, 0x07, 
0xFF, 0xF0, 0x38, 0x1F, 0x8E, 0x07, 0xFF, 0xFF, 0x1C, 0x71, 0xFF, 0x00, 0x7F, 0xFF, 0x03, 0x81, 0xF8, 0xE0, 0x7F, 0xFF, 0xF1, 0xC7, 0x1F, 0xF0, 0x07, 0xFF, 0xF0, 
0x38, 0x1F, 0x8E, 0x07, 0xFF, 0xC7, 0x1C, 0x7F, 0xC0, 0xE3, 0x8F, 0xF8, 0xE3, 0x8E, 0x38, 0x1F, 0xFF, 0xFC, 0x71, 0xC7, 0xFC, 0x0E, 0x38, 0xFF, 0x8E, 0x38, 0xE3, 
0x81, 0xFF, 0xFF, 0xC7, 0x1C, 0x7F, 0xC0, 0xE3, 0x8F, 0xF8, 0xE3, 0x8E, 0x38, 0x1F, 0xFF, 0xFC, 0x0E, 0x00, 0x1F, 0x80, 0x38, 0x03, 0x8F, 0xC0, 0x00, 0x00, 0x3F, 
0xFF, 0xC0, 0xE0, 0x01, 0xF8, 0x03, 0x80, 0x38, 0xFC, 0x00, 0x00, 0x03, 0xFF, 0xFC, 0x0E, 0x00, 0x1F, 0x80, 0x38, 0x03, 0x8F, 0xC0, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 
0xFF, 0xFF, 0xC7, 0xE0, 0x70, 0x07, 0x00, 0x7F, 0xC0, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x7E, 0x07, 0x00, 0x70, 0x07, 0xFC, 0x0E, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 
0xC7, 0xE0, 0x70, 0x07, 0x00, 0x7F, 0xC0, 0xE3, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0x8F, 0xF8, 0x03, 0x81, 0xC7, 0x1C, 0x71, 0xFF, 0xFF, 0xC0, 0x00, 0x01, 0xF8, 0xFF, 
0x80, 0x38, 0x1C, 0x71, 0xC7, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0x8F, 0xF8, 0x03, 0x81, 0xC7, 0x1C, 0x71, 0xFF, 0xFF, 0xC7, 0xFF, 0xF1, 0xC7, 0xE0, 0x71, 0xC7, 
0xE0, 0x7F, 0xC7, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0x1C, 0x7E, 0x07, 0x1C, 0x7E, 0x07, 0xFC, 0x7F, 0xFF, 0xFF, 0xC7, 0xFF, 0xF1, 0xC7, 0xE0, 0x71, 0xC7, 0xE0, 0x7F, 
0xC7, 0xFF, 0xFF, 0xFC, 0x70, 0x07, 0x1F, 0x8E, 0x38, 0x03, 0x8F, 0xC0, 0x00, 0x70, 0x07, 0xFF, 0xC7, 0x00, 0x71, 0xF8, 0xE3, 0x80, 0x38, 0xFC, 0x00, 0x07, 0x00, 
0x7F, 0xFC, 0x70, 0x07, 0x1F, 0x8E, 0x38, 0x03, 0x8F, 0xC0, 0x00, 0x70, 0x07, 0xFF, 0xC7, 0x00, 0x71, 0xC0, 0xFC, 0x71, 0xC0, 0xFC, 0x7F, 0xF8, 0xFC, 0x7F, 0xFC, 
0x70, 0x07, 0x1C, 0x0F, 0xC7, 0x1C, 0x0F, 0xC7, 0xFF, 0x8F, 0xC7, 0xFF, 0xC7, 0x00, 0x71, 0xC0, 0xFC, 0x71, 0xC0, 0xFC, 0x7F, 0xF8, 0xFC, 0x7F, 0xFC, 0x70, 0x07, 
0x1F, 0x81, 0xC7, 0xFC, 0x71, 0xC0, 0xFC, 0x01, 0xC7, 0xFF, 0xC7, 0x00, 0x71, 0xF8, 0x1C, 0x7F, 0xC7, 0x1C, 0x0F, 0xC0, 0x1C, 0x7F, 0xFC, 0x70, 0x07, 0x1F, 0x81, 
0xC7, 0xFC, 0x71, 0xC0, 0xFC, 0x01, 0xC7, 0xFF, 0xC7, 0xFF, 0xF1, 0xC0, 0x00, 0x71, 0xC7, 0x1C, 0x70, 0x00, 0x03, 0xFF, 0xFC, 0x7F, 0xFF, 0x1C, 0x00, 0x07, 0x1C, 
0x71, 0xC7, 0x00, 0x00, 0x3F, 0xFF, 0xC7, 0xFF, 0xF1, 0xC0, 0x00, 0x71, 0xC7, 0x1C, 0x70, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0x8E, 0x38, 0xFC, 0x0F, 0xF8, 
0xE3, 0x8F, 0xFF, 0xFF, 0xC0, 0x00, 0x01, 0xF8, 0xE3, 0x8F, 0xC0, 0xFF, 0x8E, 0x38, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0x8E, 0x38, 0xFC, 0x0F, 0xF8, 0xE3, 0x8F, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
  _tft.drawBitmapMy(60,110,qrCode1,100,100,0x0000);*/

  //const PROGMEM uint8_t qrCode = bytes;
  //_tft.drawBitmapMy(60,110,qrCode,100,100,0x0000);

  }
}